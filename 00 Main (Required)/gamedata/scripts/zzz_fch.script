ICON_OVERRIDES = {
  purification_tablet = {
    mcmKey   = "fch/recolorTablets",
    texture  = "ui\\ui_canteens_fch",
    gridAxis = {200, 0, 250, 50},
  },
  flask = {
    mcmKey   = "fch/useCamoIcons",
    texture  = "ui\\ui_canteens_fch",
    gridAxis = {0, 0, 50, 50},
  },
}

ICON_OVERRIDES.dirty_water   = ICON_OVERRIDES.flask
ICON_OVERRIDES.boiled_water  = ICON_OVERRIDES.flask
ICON_OVERRIDES.empty_canteen = ICON_OVERRIDES.flask


-- items per economy setting
TRADER_STOCK_LIMITS = {
  purification_tablet = {2, 1, 1},
  flask = {1, 0, 0},
}


local unpack                  = unpack or table.unpack
local UICellItemAddIcon       = utils_ui.UICellItem.Add_Icon
local UICellItemAddShadow     = utils_ui.UICellItem.Add_Shadow
local UICellItemAddLayers     = utils_ui.UICellItem.Add_Layers
local UtilsXMLGetIconsTexture = utils_xml.get_icons_texture
local UtilsXMLGetItemAxis     = utils_xml.get_item_axis


function shouldApplyFlaskIcon(section)
  local flaskTexture = SYS_GetParam(0, "flask", "icons_texture")
  return
    (section == "dirty_water"
    or section == "boiled_water"
    or section == "empty_canteen")
    and flaskTexture == "ui\\AlphaLion\\ui_FoodDrinks"
end


-- override the texture
function utils_ui.UICellItem:Add_Icon(sec, w, h)
  local override = ICON_OVERRIDES[sec]

  -- not a canteen or tablets
  if override == nil then
    return UICellItemAddIcon(self, sec, w, h)
  end

  function utils_xml.get_icons_texture(section)
    -- replace with CAMO texture
    if ui_mcm.get(override.mcmKey) then
      return override.texture
    end

    -- replace with AlphaLion's flask texture
    if shouldApplyFlaskIcon(section) then
      return UtilsXMLGetIconsTexture("flask")
    end

    -- default behavior
    return UtilsXMLGetIconsTexture(section)
  end

  function utils_xml.get_item_axis(section, gridSize, unpacked)
    -- replace with camo grid config
    if ui_mcm.get(override.mcmKey) then
      return unpack(override.gridAxis)
    end

    -- replace with AlphaLion's flask grid config
    if shouldApplyFlaskIcon(section) then
      return UtilsXMLGetItemAxis("flask", gridSize, unpacked)
    end

    -- default behavior
    return UtilsXMLGetItemAxis(section, gridSize, unpacked)
  end

  UICellItemAddIcon(self, sec, w, h)

  -- undo monkey patches
  utils_xml.get_icons_texture = UtilsXMLGetIconsTexture
  utils_xml.get_item_axis     = UtilsXMLGetItemAxis
end


-- override the texture
function utils_ui.UICellItem:Add_Shadow(sec, w, h)
  local override = ICON_OVERRIDES[sec]

  -- not a canteen or tablets
  if override == nil then
    return UICellItemAddShadow(self, sec, w, h)
  end

  function utils_xml.get_icons_texture(section)
    -- replace with CAMO texture
    if ui_mcm.get(override.mcmKey) then
      return override.texture
    end

    -- replace with AlphaLion's flask texture
    if shouldApplyFlaskIcon(section) then
      return UtilsXMLGetIconsTexture("flask")
    end

    -- default behavior
    return UtilsXMLGetIconsTexture(section)
  end

  function utils_xml.get_item_axis(section, gridSize, unpacked)
    -- replace with camo grid config
    if ui_mcm.get(override.mcmKey) then
      return unpack(override.gridAxis)
    end

    -- replace with AlphaLion's flask grid config
    if shouldApplyFlaskIcon(section) then
      return UtilsXMLGetItemAxis("flask", gridSize, unpacked)
    end

    -- default behavior
    return UtilsXMLGetItemAxis(section, gridSize, unpacked)
  end

  UICellItemAddShadow(self, sec, w, h)

  -- undo monkey patches
  utils_xml.get_icons_texture = UtilsXMLGetIconsTexture
  utils_xml.get_item_axis     = UtilsXMLGetItemAxis
end


-- hide indicators
function utils_ui.UICellItem:Add_Layers(xml, obj, sec, clsid)
  local hideIndicators = ICON_OVERRIDES[sec]
    and not ui_mcm.get("fch/useIndicators")
    or  false

  UICellItemAddLayers(self, xml, obj, sec, clsid)

  if hideIndicators and self.layer[1] ~= nil then
    self.layer[1]:Show(false)
  end
end


-- override cooking sound for campfire roasting
if arszi_campfire_roasting then
  function arszi_campfire_roasting.use_roast(item)
    if not can_use_campfire() then
      return
    end

    local section = item:section()

    if foods[section] then
      if IsItem("multiuse", nil, item) then
        manage_food(foods[section], item, item:get_remaining_uses())
      else
        manage_food(foods[section], item)
      end
    end

    xr_effects.play_inv_cooking()
  end
end


-- override trader stocks
function limitTraderStock(npc)
  if not ui_mcm.get("fch/limitTraderStock") then
    return
  end

  local economyType = game_difficulties.get_eco_factor("type")
  local itemCounts  = {}

  npc:iterate_inventory(function(_, item)
    local itemName = item:section()

    if
      not TRADER_STOCK_LIMITS[itemName]
      or not TRADER_STOCK_LIMITS[itemName][economyType]
    then
      return
    end

    local itemLimit = TRADER_STOCK_LIMITS[itemName][economyType]

    itemCounts[itemName] = itemCounts[itemName]
      and itemCounts[itemName] + 1
      or  1

    if itemCounts[itemName] > itemLimit then
      printf("TESTING %s over limit of %s, removing", itemName, itemLimit)
      alife_release_id(item:id())
    end
  end)
end


function on_game_start()
  RegisterScriptCallback("trader_on_restock", limitTraderStock)
end
