-- NOTE: Patched method is in: zz_item_cooking_keep_crafting_window_open

local UICookOnCook      = item_cooking.UICook.OnCook
local GAlifeCreateItem  = _G.alife_create_item
local ingredientCount   = item_cooking._size or 2
local dirtyWaterMinUses = 1
local dirtyWaterMaxUses = 5


-- consume 1-5 uses of dirty water depending on what's in user's inventory
function OnBoilWater(self)
  local meal = self:GetSelectedMeal()

  local dirtyWaterIndex = nil
  local usesToConsume   = 0

  for i = 1, ingredientCount do
    if not meal[i] then
      goto continue
    end

    local sec = meal[i].sec
    local amt = meal[i].amt

    if sec ~= "dirty_water" then
      goto continue
    end

    dirtyWaterIndex = 1

    for id, uses in pairs(self.objs[sec]) do
      usesToConsume = math.min(usesToConsume + uses, dirtyWaterMaxUses)
    end

    ::continue::
  end

  if dirtyWaterIndex then
    meal[dirtyWaterIndex].amt = usesToConsume

    function _G.alife_create_item(s, o, t)
      if s ~= "boiled_water" then
        return GAlifeCreateItem(s, o, t)
      end

      if not t then
        t = {}
      end

      t.uses = usesToConsume
      GAlifeCreateItem(s, o, t)

      meal[dirtyWaterIndex].amt = dirtyWaterMinUses
      _G.alife_create_item = GAlifeCreateItem
    end
  end

  UICookOnCook(self)
end


-- create an empty canteen when cooking uses a flask
function item_cooking.UICook:OnCook()
  local meal = self:GetSelectedMeal()

  if not meal then
    return
  end

  if meal.sec == "boiled_water" then
    return OnBoilWater(self)
  end

  function createEmptyCanteen(object)
    if object:section_name() == "flask" and self.objs.flask[object.id] then
      alife_create_item("empty_canteen", db.actor)
    end
  end

  RegisterScriptCallback("server_entity_on_unregister", createEmptyCanteen)
  UICookOnCook(self)
  UnregisterScriptCallback("server_entity_on_unregister", createEmptyCanteen)
end
